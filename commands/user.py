import types
from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from create_bot import dispatcher, bot
from config import get_admin_ids
from states.user import FsmUser
from services import db_service, db, logging
from keyboards import admin_kb
from handlers.user import choose_quest

ADMIN_ID = get_admin_ids()


async def start(message, state: FSMContext, res=False):
    try:
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å id: {message.chat.id}; username: {message.chat.username}; first_name: {message.chat.last_name} –∑–∞–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start.")
        user = await db.users.find_one({"_id": message.chat.id})
        logging.debug(
            f"{user}")
        if not user:
            logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º...")
            await db_service.add_user(db, message.chat)
            logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î –¥–æ–±–∞–≤–ª–µ–Ω.")

        # –ö–æ–º–∞–Ω–¥–∞ start
        if message.chat.id in get_admin_ids():
            await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –∞–¥–º–∏–Ω! –ß–µ–≥–æ –∂–µ–ª–∞–µ—à—å?", reply_markup=admin_kb.get_admin_main_menu())
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ
            hasWon = await db_service.check_if_user_already_won(db, message.chat.id)
            logging.info(f"hasWon: {hasWon}")
            if (not hasWon):
                await bot.send_message(message.chat.id, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫! –Ø - –ø–æ–º–æ—â–Ω–∏–∫ –ù–∞—Å—Ç–∏, –∏ —è –ø–æ–º–æ–≥—É –í–∞–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –∏ —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! ‚ò∫Ô∏è –ù—É–∂–Ω–æ –ª–∏—à—å –æ—Ç–≥–∞–¥–∞—Ç—å –∑–∞–≥–∞–¥–∫—É. –ù—É —á—Ç–æ, –ø–æ–µ—Ö–∞–ª–∏! üíÉ')
                await choose_quest(message)
            else:
                await bot.send_message(message.chat.id, '–í–∏–∂—É, –í—ã —É–∂–µ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ! –î–∞–≤–∞–π—Ç–µ –¥–∞–¥–∏–º —à–∞–Ω—Å –¥—Ä—É–≥–∏–º –∫–ª–∏–µ–Ω—Ç–∞–º üòâ', reply_markup=ReplyKeyboardRemove())
    except Exception as ex:
        logging.exception(Exception)
        await state.finish()
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())


async def help(message, res=False):
    # –ö–æ–º–∞–Ω–¥–∞ help
    await bot.send_message(message.chat.id, f"–ó–∞ –ø–æ–º–æ—â—å—é –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫:\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - –ê–Ω–∞—Å—Ç–∞—Å–∏—è @shellacnastya\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - –ò–≤–∞–Ω @Shad0w_Spark")


def register_user_commands(dispatcher: Dispatcher):
    dispatcher.register_message_handler(start, commands=["start"], state=None)
    dispatcher.register_message_handler(help, commands=["help"])
