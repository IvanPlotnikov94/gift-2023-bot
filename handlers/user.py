import random
import types
from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from create_bot import dispatcher, bot
from config import get_admin_ids
from states.user import FsmUser
from services import db_service, db, logging
from keyboards import user_kb

ADMIN_ID = get_admin_ids()


async def choose_question(message: types.Message, state=FSMContext):
    if message.chat.id not in ADMIN_ID:
        try:
            logging.debug(f"–ú–µ—Ç–æ–¥ choose_question(). message.text: {message.text}")
            questions = await db_service.get_available_questions(db, message.chat.id)
            questions_text = [q['question'] for q in questions]
            questions_answer = [a['answer'] for a in questions]
            logging.debug(
                f"available questions: {questions}\nquestions_text: {questions_text}\nquestions_answer: {questions_answer}")

            if message.text.isdigit() and int(message.text) > 0 and int(message.text) <= len(questions_text):
                logging.debug(
                    f"message.text.isdigit(): {message.text.isdigit()}\nint(message.text): {int(message.text)}\nlen(questions_text): {len(questions_text)}")
                async with state.proxy() as quest:
                    quest['id'] = questions[int(message.text) - 1]['_id']
                    quest['question'] = questions_text[int(message.text) - 1]
                    quest['answer'] = questions_answer[int(message.text) - 1]
                # –û—Ç–º–µ—Ç–∫–∞ –≤ –ë–î, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
                logging.debug(str(quest))
                await db_service.update_question(db, quest['id'], message.chat.id)
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await FsmUser.write_answer.set()
                await bot.send_message(message.chat.id, quest['question'], reply_markup=ReplyKeyboardRemove())
            else:
                questions = await db_service.get_available_questions(db, message.chat.id)
                markup = user_kb.choose_question_kb(str(len(questions)))
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–≥–∞–¥–∫–∏!", reply_markup=markup)
        except Exception as ex:
            logging.exception(Exception)
            await state.finish()
            await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())
        # –ü–æ–∏—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–≥–∞–¥–∫–∏ –ø–æ message.text
        # –°–Ω–∞—á–∞–ª–∞ —Å—á–∏—Ç–∞—Ç—å –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏, —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ questions.number, –∑–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
        # –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å message.text —ç—Ç–æ–º—É —Å–ø–∏—Å–∫—É. –ï—Å–ª–∏ –¥–∞, —Ç–æ –≤—ã–¥–∞–µ–º —Ç–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–≥–∞–¥–∫–∏.
        # chosen_question = db.questions.findOne({"number":{message.text}}) #–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –º–± –Ω–∞–¥–æ f-—Å—Ç—Ä–æ–∫—É
        # –ú–æ–∂–Ω–æ –µ—â–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ proxy (–ª–æ–∫–∞–ª.—Ö—Ä–∞–Ω–∏–ª–∏—â–µ) –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –Ω–µ –ª–µ–∑—Ç—å –≤ –ë–î
        # async with state.proxy() as quest:
            # quest['question'] = chosen_question["text"] #text - –∏–º—è –ø–æ–ª—è –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–º–æ–∂–µ—Ç –ø–æ–º–µ–Ω—è—é –ø–æ–∑–∂–µ)
            # quest['answer'] = chosen_question["answer"] # —Ç—É—Ç –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤!
            # await FsmUser.write_answer.set()
            # await message.reply(f"–¢–µ–∫—Å—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–≥–∞–¥–∫–∏: {chosen_question["text"]}. –¢—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—É–º–∞–π –∏ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –æ—Ç–≤–µ—Ç!")


async def write_answer(message: types.Message, state=FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if message.chat.id not in ADMIN_ID:
        try:
            logging.debug(f"–ú–µ—Ç–æ–¥ write_answer(). message.text: {message.text}")
            async with state.proxy() as quest:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –º–∞—Å—Å–∏–≤—É –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                # if (message.text.lower() in [item.lower() for item in quest['answer']]):
                if (message.text.lower() == quest['answer'].lower()):
                    # –û—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π! –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É lower() –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Å—Å–∏–≤–∞
                    await message.reply("–í–µ—Ä–Ω–æ! üëè –£ –º–µ–Ω—è –¥–ª—è –í–∞—Å –µ—Å—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å? üéÅ", reply_markup=user_kb.right_answer_kb())
                    await FsmUser.get_prize.set()
                else:
                    await FsmUser.try_another.set()
                    await message.reply("–≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç! –•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é –∑–∞–≥–∞–¥–∫—É?", reply_markup=user_kb.try_another_kb())
        except Exception as ex:
            logging.exception(Exception)
            await state.finish()
            await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())


async def try_another(message: types.Message, state=FSMContext):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    if message.chat.id not in ADMIN_ID:
        try:
            logging.debug(f"–ú–µ—Ç–æ–¥ try_another(). message.text: {message.text}")
            await FsmUser.choose_question.set()
            await choose_quest(message)
        except Exception as ex:
            logging.exception(Exception)
            await state.finish()
            await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())


async def get_prize(message: types.Message, state=FSMContext):
    # –û—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π; –∑–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞
    try:
        logging.debug(f"–ú–µ—Ç–æ–¥ get_prize(). message.text: {message.text}")
        if (message.text.lower() in ["–¥–∞", "–¥–∞!"]):
            prize = await get_random_gift()

            if (prize is not None):
                # –£–º–µ–Ω—å—à–∞–µ–º –≤ –ë–î –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–¥–∞—Ä–∫–æ–≤ –Ω–∞ 1
                await db_service.subtract_gift_amount(db, prize)
                await bot.send_photo(message.chat.id, prize['photo_id'], f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {prize['name']}\n–° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –ì–æ–¥–æ–º!\n–£–≤–∏–¥–∏–º—Å—è –≤ –ù–æ–≤–æ–º –ì–æ–¥—É –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∞—Ö üòâ", reply_markup=ReplyKeyboardRemove())
            else:
                await bot.send_message(message.chat.id, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –ø–æ–¥–∞—Ä–æ–∫! üéÅ\n –ê –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ - —É—Ç–æ—á–Ω–∏—Ç–µ —É –ù–∞—Å—Ç–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –º–µ–Ω—è –ø—Ä–æ–∏–∑–æ—à–µ–ª –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π —Å–±–æ–π üòÖ\n–° –Ω–∞—Å—Ç—É–ø–∞—é—â–∏–º –ù–æ–≤—ã–º –ì–æ–¥–æ–º!\n–£–≤–∏–¥–∏–º—Å—è –≤ –ù–æ–≤–æ–º –ì–æ–¥—É –Ω–∞ –Ω–æ–≥–æ—Ç–æ—á–∫–∞—Ö üòâ", reply_markup=ReplyKeyboardRemove())
            # –ü–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ—Ç–º–µ—Ç–∫—É –≤ –ë–î –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª –ø–æ–¥–∞—Ä–æ–∫
            await db_service.update_user_has_won(db, message.chat.id)
            await state.finish()
        elif (message.text.lower() in ["–Ω–µ—Ç", "–Ω–µ—Ç!"]):
            await bot.send_message(message.chat.id, '–°–µ—Ä—å–µ–∑–Ω–æ? –ù–µ –≤–µ—Ä—é! –ö—Ç–æ –æ—Ç–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç –ø–æ–¥–∞—Ä–∫–∞? üòÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')
            await bot.send_message(message.chat.id, "–£ –º–µ–Ω—è –¥–ª—è –í–∞—Å –µ—Å—Ç—å –ø–æ–¥–∞—Ä–æ–∫, –≥–æ—Ç–æ–≤—ã –ø–æ–ª—É—á–∏—Ç—å? üéÅ", reply_markup=user_kb.right_answer_kb())
        else:
            await bot.send_message(message.chat.id, '–Ø –í–∞—Å –Ω–µ –ø–æ–Ω—è–ª. –ù–∞–ø–∏—à–∏—Ç–µ "–î–∞", –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫!', reply_markup=user_kb.right_answer_kb())
    except Exception as ex:
        logging.exception(Exception)
        await state.finish()
        await bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())


# region –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã


async def choose_quest(message):
    questions = await db_service.get_available_questions(db, message.chat.id)
    logging.debug(
        f"–ú–µ—Ç–æ–¥ choose_quest(). message.text: {message.text} [q['question'] for q in questions]: {[q['question'] for q in questions]}\nlen(questions): {len(questions)}")
    if (len(questions) > 0):
        markup = user_kb.choose_question_kb(str(len(questions)))

        if markup != None:
            await FsmUser.choose_question.set()
            await bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–∏—Ä–∞–π—Ç–µ –∑–∞–≥–∞–¥–∫—É!',  reply_markup=markup)
        else:
            await bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∫–æ–Ω–∫—É—Ä—Å —Å–µ–π—á–∞—Å –∑–∞–∫—Ä—ã—Ç!', reply_markup=ReplyKeyboardRemove())
    else:
        # –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–≥–∞–¥–æ–∫ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
        await FsmUser.get_prize.set()
        await bot.send_message(message.chat.id, "–û–π, –≤—Å–µ –∑–∞–≥–∞–¥–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å! üòÖ\n–ù–∞–¥–µ—é—Å—å, —ç—Ç–æ –±—É–¥–µ—Ç —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –Ω–µ—É–¥–∞—á–∞ –í–∞—à–µ–≥–æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–≥–æ –≥–æ–¥–∞ üôè\n–ó–∞ –í–∞—à–∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∏ —É—Å–∏–ª–∏—è –ø—Ä–µ–¥–ª–∞–≥–∞—é —É—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑! üíï", reply_markup=user_kb.right_answer_kb())


async def get_random_gift():
    # –†–∞–Ω–¥–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
    logging.debug(f"–ú–µ—Ç–æ–¥ get_random_gift().")
    all_gifts = await db.gifts.find().to_list(None)
    logging.debug(f"all_gifts: {all_gifts}")
    gifts = [gift for gift in all_gifts if int(gift['amount']) > 0]  # –ù–µ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ–¥–∞—Ä–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏
    logging.debug(f"–ë–µ–∑ —É—á–µ—Ç–∞ –ø–æ–¥–∞—Ä–∫–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ = 0. gifts: {gifts}")
    gifts_id = [g['_id'] for g in gifts]
    logging.debug(f"gifts_id: {gifts_id}")
    winner_id = random.choice(gifts_id)
    logging.debug(f"winner_id: {winner_id}")
    prize = next((gift for gift in gifts if gift['_id'] == winner_id), None)
    logging.debug(f"prize: {prize}")
    return prize

# endregion


def register_user_handlers(dispatcher: Dispatcher):
    dispatcher.register_message_handler(choose_question, state=FsmUser.choose_question)
    dispatcher.register_message_handler(write_answer, state=FsmUser.write_answer)
    dispatcher.register_message_handler(get_prize, state=FsmUser.get_prize)
    # lambda message: message.text.lower() in [
    #     u'–¥–∞', u'–¥–∞!', u'–Ω–µ—Ç', u'–Ω–µ—Ç!']
    dispatcher.register_message_handler(try_another, lambda message: message.text == u'–î–∞!', state=FsmUser.try_another)
